## Properties in this file are directly passed to the Spring runtime that runs Relational Migrator

## Uncomment the relevant deployment mode local, unattended, kafka or confluent
#spring.profiles.active: local
spring.profiles.active: unattended
#spring.profiles.active: kafka
#spring.profiles.active: confluent

## Uncomment and adjust as per your configuration to enable SSL
## See https://docs.spring.io/spring-cloud-skipper/docs/2.8.4/reference/htmlsingle/#configuration-security-enabling-https
server.port: 8278
#server.ssl.enabled: true
#server.ssl.key-alias: <alias>
#server.ssl.key-store: <path/to/key/store/file.p12>
#server.ssl.key-store-password: <password>
#server.ssl.key-store-type: <PKCS12 or JKS>

## Uncomment and adjust to run within Kafka Connect
#migrator.kafka.bootstrap.servers: <kafka-cluster-bootstrap-servers-url>
#migrator.kafka.connect.url: <kafka-connect-server-url>

## Uncomment below properties and adjust to run within Kafka Connect metrics.
## In order to add any jmx properties like ssl trustore properties suffix it with 'migrator.kafka.metrics.jmx.properties'
#migrator.kafka.connect.metrics.jmx.service.url: <jmx_service_url> example: service:jmx:rmi:///jndi/rmi://localhost:9876/jmxrmi
#migrator.kafka.connect.metrics.jmx.authenticate: <true/false>. Defaults to false.
#migrator.kafka.connect.metrics.jmx.ssl: <true/false>. Defaults to false.
#migrator.kafka.connect.metrics.jmx.properties.com.sun.management.jmxremote.access.file: <Path_to_access_file\jmxremote.access>
#migrator.kafka.connect.metrics.jmx.properties.com.sun.management.jmxremote.password.file: <Path_to_password_file\jmxremote.password>

## Uncomment and adjust the following properties for retrying certain retriable failures.
## Please follow below documentation on source connector retry properties:
## https://debezium.io/documentation/reference/stable/development/engine.html#engine-properties
#migrator.connector.source.common.errors.max.retries: <-1|0|>0>, -1 means no limit, 0 means no retry and >0 is number of retries, default is 5
#migrator.connector.source.common.errors.retry.delay.initial.ms: <min delay in ms> default is 300ms
#migrator.connector.source.common.errors.retry.delay.max.ms: <max delay in ms> default is 10000
#migrator.connector.sink.common.errors.max.retries: <-1|0|>0>, -1 means no limit, 0 means no retry and >0 is number of retries, default is 5
#migrator.connector.sink.common.errors.retry.initial.max.ms: <max delay in ms> default is 30 secs
#migrator.connector.sink.common.errors.retry.delay.max.ms: <max delay in ms> default is 1 min

## Uncomment and adjust to run with Kafka profile when SSL is enabled for kafka-connect REST API (HTTPS)
#migrator.kafka.connect.ssl.truststore.location: <path to truststore>
#migrator.kafka.connect.ssl.truststore.password: <truststore password>
#migrator.kafka.connect.ssl.keystore.location: <path to keystore>
#migrator.kafka.connect.ssl.keystore.password: <keystore password>


## Uncomment and adjust to run with Kafka profile when SSL is enabled for kafka-connect Debezium connectors as per below Debezium documentation:
## https://debezium.io/documentation/reference/stable/connectors/mysql.html#debezium-mysql-connector-database-history-configuration-properties
#migrator.connector.source.schema.history.internal.producer.security.protocol:SSL
#migrator.connector.source.schema.history.internal.producer.ssl.truststore.location: <path to truststore on Kafka-connect server>
#migrator.connector.source.schema.history.internal.producer.ssl.truststore.password: <truststore password>
#migrator.connector.source.schema.history.internal.producer.ssl.keystore.location: <path to keystore on Kafka-connect server>
#migrator.connector.source.schema.history.internal.producer.ssl.keystore.password: <keystore password>
#migrator.connector.source.schema.history.internal.producer.ssl.key.password: <key password>
#migrator.connector.source.schema.history.internal.consumer.security.protocol:SSL
#migrator.connector.source.schema.history.internal.consumer.ssl.truststore.location: <path to truststore on Kafka-connect server>
#migrator.connector.source.schema.history.internal.consumer.ssl.truststore.password: <truststore password>
#migrator.connector.source.schema.history.internal.consumer.ssl.keystore.location: <path to truststore on Kafka-connect server>
#migrator.connector.source.schema.history.internal.consumer.ssl.keystore.password: <keystore password>
#migrator.connector.source.schema.history.internal.consumer.ssl.key.password: <key password>
## Pass-through properties for each of the Kafka Connectors used
## migrator.connector.source.common.<property> - Both connectors - for conversion and schema registry properties
## migrator.connector.source.<property> - Debezium connector - for overriding Debezium connector properties
## migrator.connector.sink.<property> - Migrator connector - for overriding Migrator connector properties

## As an example, to enable usage of the Apicurio schema registry and Avro converter:
#migrator.connector.source.common.key.converter: io.apicurio.registry.utils.converter.AvroConverter
#migrator.connector.source.common.value.converter: io.apicurio.registry.utils.converter.AvroConverter
#migrator.connector.source.common.key.converter.apicurio.registry.url: <schema registry URL>
#migrator.connector.source.common.value.converter.apicurio.registry.url: <schema registry URL>
#migrator.connector.source.common.key.converter.apicurio.registry.auto-register: true
#migrator.connector.source.common.value.converter.apicurio.registry.auto-register: true
#migrator.connector.source.common.key.converter.apicurio.registry.find-latest: true
#migrator.connector.source.common.value.converter.apicurio.registry.find-latest: true
#migrator.connector.source.common.key.converter.apicurio.registry.auto-evolve: true
#migrator.connector.source.common.value.converter.apicurio.registry.auto-evolve: true

## Uncomment and adjust to run with Confluent profile
#migrator.confluent.environment.environment-id: <Environment ID>
#migrator.confluent.environment.cluster-id: <Cluster ID>
#migrator.confluent.environment.bootstrap-server: <xx.region.provider.confluent.cloud:9092>
#migrator.confluent.environment.rest-endpoint: <https://xxx.region.provider.confluent.cloud:443>

#migrator.confluent.cloud-credentials.api-key: <Cloud API key>
#migrator.confluent.cloud-credentials.api-secret: <Cloud API Secret>

#migrator.confluent.kafka-credentials.api-key: <Cluster API key>
#migrator.confluent.kafka-credentials.api-secret: <Cluster API Secret>

